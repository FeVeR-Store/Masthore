// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.15.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!();

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_draw_impl(
    func: impl CstDecode<String>,
    variable_builder: impl CstDecode<crate::libs::expression::VariableBuilder>,
    constant_provider: impl CstDecode<Vec<crate::libs::expression::Constant>>,
    change_context: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "draw",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_func = func.cst_decode();
            let api_variable_builder = variable_builder.cst_decode();
            let api_constant_provider = constant_provider.cst_decode();
            let api_change_context = change_context.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::api::draw(
                    api_func,
                    api_variable_builder,
                    api_constant_provider,
                    api_change_context,
                ))
            })())
        },
    )
}
fn wire_get_functions_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_functions",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || transform_result_dco((move || Result::<_, ()>::Ok(crate::api::get_functions()))()),
    )
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<f64> for f64 {
    fn cst_decode(self) -> f64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    fn cst_decode(self) -> u8 {
        self
    }
}
impl SseDecode for String {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::libs::expression::CalcReturnForDart {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_result = <Vec<f64>>::sse_decode(deserializer);
        let mut var_constants = <Vec<crate::libs::expression::Constant>>::sse_decode(deserializer);
        return crate::libs::expression::CalcReturnForDart {
            result: var_result,
            constants: var_constants,
        };
    }
}

impl SseDecode for crate::libs::expression::Constant {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_identity = <String>::sse_decode(deserializer);
        let mut var_value = <f64>::sse_decode(deserializer);
        let mut var_max = <f64>::sse_decode(deserializer);
        let mut var_min = <f64>::sse_decode(deserializer);
        let mut var_step = <f64>::sse_decode(deserializer);
        return crate::libs::expression::Constant {
            identity: var_identity,
            value: var_value,
            max: var_max,
            min: var_min,
            step: var_step,
        };
    }
}

impl SseDecode for crate::api::Expression {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_latex = <String>::sse_decode(deserializer);
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_avatar = <String>::sse_decode(deserializer);
        return crate::api::Expression {
            name: var_name,
            latex: var_latex,
            description: var_description,
            avatar: var_avatar,
        };
    }
}

impl SseDecode for crate::api::ExpressionList {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_latex = <String>::sse_decode(deserializer);
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_avatar = <String>::sse_decode(deserializer);
        let mut var_list = <Vec<crate::api::Expression>>::sse_decode(deserializer);
        return crate::api::ExpressionList {
            name: var_name,
            latex: var_latex,
            description: var_description,
            avatar: var_avatar,
            list: var_list,
        };
    }
}

impl SseDecode for f64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<crate::libs::expression::Constant> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::libs::expression::Constant>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::Expression> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::Expression>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::ExpressionList> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::ExpressionList>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<f64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<f64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for u8 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::libs::expression::VariableBuilder {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_identity = <String>::sse_decode(deserializer);
        let mut var_uninitialized = <bool>::sse_decode(deserializer);
        let mut var_min = <f64>::sse_decode(deserializer);
        let mut var_max = <f64>::sse_decode(deserializer);
        let mut var_step = <f64>::sse_decode(deserializer);
        let mut var_value = <f64>::sse_decode(deserializer);
        return crate::libs::expression::VariableBuilder {
            identity: var_identity,
            uninitialized: var_uninitialized,
            min: var_min,
            max: var_max,
            step: var_step,
            value: var_value,
        };
    }
}

impl SseDecode for i32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

// Section: rust2dart

impl flutter_rust_bridge::IntoDart for crate::libs::expression::CalcReturnForDart {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.result.into_into_dart().into_dart(),
            self.constants.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::libs::expression::CalcReturnForDart
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::libs::expression::CalcReturnForDart>
    for crate::libs::expression::CalcReturnForDart
{
    fn into_into_dart(self) -> crate::libs::expression::CalcReturnForDart {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::libs::expression::Constant {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.identity.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
            self.max.into_into_dart().into_dart(),
            self.min.into_into_dart().into_dart(),
            self.step.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::libs::expression::Constant
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::libs::expression::Constant>
    for crate::libs::expression::Constant
{
    fn into_into_dart(self) -> crate::libs::expression::Constant {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::Expression {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.name.into_into_dart().into_dart(),
            self.latex.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.avatar.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::Expression {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::Expression> for crate::api::Expression {
    fn into_into_dart(self) -> crate::api::Expression {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::ExpressionList {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.name.into_into_dart().into_dart(),
            self.latex.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.avatar.into_into_dart().into_dart(),
            self.list.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::ExpressionList {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::ExpressionList> for crate::api::ExpressionList {
    fn into_into_dart(self) -> crate::api::ExpressionList {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::libs::expression::VariableBuilder {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.identity.into_into_dart().into_dart(),
            self.uninitialized.into_into_dart().into_dart(),
            self.min.into_into_dart().into_dart(),
            self.max.into_into_dart().into_dart(),
            self.step.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::libs::expression::VariableBuilder
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::libs::expression::VariableBuilder>
    for crate::libs::expression::VariableBuilder
{
    fn into_into_dart(self) -> crate::libs::expression::VariableBuilder {
        self
    }
}

impl SseEncode for String {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::libs::expression::CalcReturnForDart {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<f64>>::sse_encode(self.result, serializer);
        <Vec<crate::libs::expression::Constant>>::sse_encode(self.constants, serializer);
    }
}

impl SseEncode for crate::libs::expression::Constant {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.identity, serializer);
        <f64>::sse_encode(self.value, serializer);
        <f64>::sse_encode(self.max, serializer);
        <f64>::sse_encode(self.min, serializer);
        <f64>::sse_encode(self.step, serializer);
    }
}

impl SseEncode for crate::api::Expression {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.latex, serializer);
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.avatar, serializer);
    }
}

impl SseEncode for crate::api::ExpressionList {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.latex, serializer);
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.avatar, serializer);
        <Vec<crate::api::Expression>>::sse_encode(self.list, serializer);
    }
}

impl SseEncode for f64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<crate::libs::expression::Constant> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::libs::expression::Constant>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::Expression> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::Expression>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::ExpressionList> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::ExpressionList>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<f64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <f64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for u8 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::libs::expression::VariableBuilder {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.identity, serializer);
        <bool>::sse_encode(self.uninitialized, serializer);
        <f64>::sse_encode(self.min, serializer);
        <f64>::sse_encode(self.max, serializer);
        <f64>::sse_encode(self.step, serializer);
        <f64>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for i32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
