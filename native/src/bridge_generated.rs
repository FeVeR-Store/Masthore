#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::libs::expression::CalcReturnForDart;
use crate::libs::expression::Constant;
use crate::libs::expression::VariableBuilder;

// Section: wire functions

fn wire_draw_impl(
    func: impl Wire2Api<String> + UnwindSafe,
    variable_builder: impl Wire2Api<VariableBuilder> + UnwindSafe,
    constant_provider: impl Wire2Api<Vec<Constant>> + UnwindSafe,
    change_context: impl Wire2Api<bool> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "draw",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_func = func.wire2api();
            let api_variable_builder = variable_builder.wire2api();
            let api_constant_provider = constant_provider.wire2api();
            let api_change_context = change_context.wire2api();
            Result::<_, ()>::Ok(draw(
                api_func,
                api_variable_builder,
                api_constant_provider,
                api_change_context,
            ))
        },
    )
}
fn wire_get_sample_for_dart_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_sample_for_dart",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(get_sample_for_dart()),
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for CalcReturnForDart {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.result.into_into_dart().into_dart(),
            self.constants.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CalcReturnForDart {}
impl rust2dart::IntoIntoDart<CalcReturnForDart> for CalcReturnForDart {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Constant {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.identity.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
            self.max.into_into_dart().into_dart(),
            self.min.into_into_dart().into_dart(),
            self.step.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Constant {}
impl rust2dart::IntoIntoDart<Constant> for Constant {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for SampleForDart {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.label.into_into_dart().into_dart(),
            self.latex.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.avater.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SampleForDart {}
impl rust2dart::IntoIntoDart<SampleForDart> for SampleForDart {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for SampleListForDart {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.label.into_into_dart().into_dart(),
            self.latex.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.avater.into_into_dart().into_dart(),
            self.list.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SampleListForDart {}
impl rust2dart::IntoIntoDart<SampleListForDart> for SampleListForDart {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
