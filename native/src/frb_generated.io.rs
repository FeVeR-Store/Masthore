// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.15.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<crate::libs::expression::VariableBuilder> for *mut wire_cst_variable_builder {
    fn cst_decode(self) -> crate::libs::expression::VariableBuilder {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::libs::expression::VariableBuilder>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::libs::expression::CalcReturnForDart> for wire_cst_calc_return_for_dart {
    fn cst_decode(self) -> crate::libs::expression::CalcReturnForDart {
        crate::libs::expression::CalcReturnForDart {
            result: self.result.cst_decode(),
            constants: self.constants.cst_decode(),
        }
    }
}
impl CstDecode<crate::libs::expression::Constant> for wire_cst_constant {
    fn cst_decode(self) -> crate::libs::expression::Constant {
        crate::libs::expression::Constant {
            identity: self.identity.cst_decode(),
            value: self.value.cst_decode(),
            max: self.max.cst_decode(),
            min: self.min.cst_decode(),
            step: self.step.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::Expression> for wire_cst_expression {
    fn cst_decode(self) -> crate::api::Expression {
        crate::api::Expression {
            name: self.name.cst_decode(),
            latex: self.latex.cst_decode(),
            description: self.description.cst_decode(),
            avatar: self.avatar.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::ExpressionList> for wire_cst_expression_list {
    fn cst_decode(self) -> crate::api::ExpressionList {
        crate::api::ExpressionList {
            name: self.name.cst_decode(),
            latex: self.latex.cst_decode(),
            description: self.description.cst_decode(),
            avatar: self.avatar.cst_decode(),
            list: self.list.cst_decode(),
        }
    }
}
impl CstDecode<Vec<crate::libs::expression::Constant>> for *mut wire_cst_list_constant {
    fn cst_decode(self) -> Vec<crate::libs::expression::Constant> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::Expression>> for *mut wire_cst_list_expression {
    fn cst_decode(self) -> Vec<crate::api::Expression> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::ExpressionList>> for *mut wire_cst_list_expression_list {
    fn cst_decode(self) -> Vec<crate::api::ExpressionList> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<f64>> for *mut wire_cst_list_prim_f_64_strict {
    fn cst_decode(self) -> Vec<f64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<crate::libs::expression::VariableBuilder> for wire_cst_variable_builder {
    fn cst_decode(self) -> crate::libs::expression::VariableBuilder {
        crate::libs::expression::VariableBuilder {
            identity: self.identity.cst_decode(),
            uninitialized: self.uninitialized.cst_decode(),
            min: self.min.cst_decode(),
            max: self.max.cst_decode(),
            step: self.step.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}
impl NewWithNullPtr for wire_cst_calc_return_for_dart {
    fn new_with_null_ptr() -> Self {
        Self {
            result: core::ptr::null_mut(),
            constants: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_calc_return_for_dart {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_constant {
    fn new_with_null_ptr() -> Self {
        Self {
            identity: core::ptr::null_mut(),
            value: Default::default(),
            max: Default::default(),
            min: Default::default(),
            step: Default::default(),
        }
    }
}
impl Default for wire_cst_constant {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_expression {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            latex: core::ptr::null_mut(),
            description: core::ptr::null_mut(),
            avatar: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_expression {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_expression_list {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            latex: core::ptr::null_mut(),
            description: core::ptr::null_mut(),
            avatar: core::ptr::null_mut(),
            list: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_expression_list {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_variable_builder {
    fn new_with_null_ptr() -> Self {
        Self {
            identity: core::ptr::null_mut(),
            uninitialized: Default::default(),
            min: Default::default(),
            max: Default::default(),
            step: Default::default(),
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_variable_builder {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_masthore_dart_fn_deliver_output(
    call_id: i32,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[no_mangle]
pub extern "C" fn frbgen_masthore_wire_draw(
    func: *mut wire_cst_list_prim_u_8_strict,
    variable_builder: *mut wire_cst_variable_builder,
    constant_provider: *mut wire_cst_list_constant,
    change_context: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_draw_impl(func, variable_builder, constant_provider, change_context)
}

#[no_mangle]
pub extern "C" fn frbgen_masthore_wire_get_functions(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_functions_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_masthore_cst_new_box_autoadd_variable_builder(
) -> *mut wire_cst_variable_builder {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_variable_builder::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_masthore_cst_new_list_constant(len: i32) -> *mut wire_cst_list_constant {
    let wrap = wire_cst_list_constant {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_constant>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_masthore_cst_new_list_expression(
    len: i32,
) -> *mut wire_cst_list_expression {
    let wrap = wire_cst_list_expression {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_expression>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_masthore_cst_new_list_expression_list(
    len: i32,
) -> *mut wire_cst_list_expression_list {
    let wrap = wire_cst_list_expression_list {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_expression_list>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_masthore_cst_new_list_prim_f_64_strict(
    len: i32,
) -> *mut wire_cst_list_prim_f_64_strict {
    let ans = wire_cst_list_prim_f_64_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_masthore_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_calc_return_for_dart {
    result: *mut wire_cst_list_prim_f_64_strict,
    constants: *mut wire_cst_list_constant,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_constant {
    identity: *mut wire_cst_list_prim_u_8_strict,
    value: f64,
    max: f64,
    min: f64,
    step: f64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_expression {
    name: *mut wire_cst_list_prim_u_8_strict,
    latex: *mut wire_cst_list_prim_u_8_strict,
    description: *mut wire_cst_list_prim_u_8_strict,
    avatar: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_expression_list {
    name: *mut wire_cst_list_prim_u_8_strict,
    latex: *mut wire_cst_list_prim_u_8_strict,
    description: *mut wire_cst_list_prim_u_8_strict,
    avatar: *mut wire_cst_list_prim_u_8_strict,
    list: *mut wire_cst_list_expression,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_constant {
    ptr: *mut wire_cst_constant,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_expression {
    ptr: *mut wire_cst_expression,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_expression_list {
    ptr: *mut wire_cst_expression_list,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_f_64_strict {
    ptr: *mut f64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_variable_builder {
    identity: *mut wire_cst_list_prim_u_8_strict,
    uninitialized: bool,
    min: f64,
    max: f64,
    step: f64,
    value: f64,
}
