// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class Native {
  CalcReturnForDart draw(
      {required String func,
      required VariableBuilder variableBuilder,
      required List<Constant> constantProvider,
      required bool changeContext,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDrawConstMeta;

  List<SampleListForDart> getSampleForDart({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetSampleForDartConstMeta;
}

class CalcReturnForDart {
  final Float64List result;
  final List<Constant> constants;

  const CalcReturnForDart({
    required this.result,
    required this.constants,
  });
}

class Constant {
  final String identity;
  double value;
  final double max;
  final double min;
  final double step;

  Constant({
    required this.identity,
    required this.value,
    required this.max,
    required this.min,
    required this.step,
  });
}

class SampleForDart {
  final String label;
  final String latex;
  final String description;
  final String avater;

  const SampleForDart({
    required this.label,
    required this.latex,
    required this.description,
    required this.avater,
  });
}

class SampleListForDart {
  final String label;
  final String latex;
  final String description;
  final String avater;
  final List<SampleForDart> list;

  const SampleListForDart({
    required this.label,
    required this.latex,
    required this.description,
    required this.avater,
    required this.list,
  });
}

class VariableBuilder {
  final String identity;
  final bool uninitialized;
  final double min;
  final double max;
  final double step;
  final double value;

  const VariableBuilder({
    required this.identity,
    required this.uninitialized,
    required this.min,
    required this.max,
    required this.step,
    required this.value,
  });
}

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  CalcReturnForDart draw(
      {required String func,
      required VariableBuilder variableBuilder,
      required List<Constant> constantProvider,
      required bool changeContext,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(func);
    var arg1 = _platform.api2wire_box_autoadd_variable_builder(variableBuilder);
    var arg2 = _platform.api2wire_list_constant(constantProvider);
    var arg3 = changeContext;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_draw(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_calc_return_for_dart,
      parseErrorData: null,
      constMeta: kDrawConstMeta,
      argValues: [func, variableBuilder, constantProvider, changeContext],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDrawConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "draw",
        argNames: [
          "func",
          "variableBuilder",
          "constantProvider",
          "changeContext"
        ],
      );

  List<SampleListForDart> getSampleForDart({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get_sample_for_dart(),
      parseSuccessData: _wire2api_list_sample_list_for_dart,
      parseErrorData: null,
      constMeta: kGetSampleForDartConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSampleForDartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_sample_for_dart",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  CalcReturnForDart _wire2api_calc_return_for_dart(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CalcReturnForDart(
      result: _wire2api_float_64_list(arr[0]),
      constants: _wire2api_list_constant(arr[1]),
    );
  }

  Constant _wire2api_constant(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Constant(
      identity: _wire2api_String(arr[0]),
      value: _wire2api_f64(arr[1]),
      max: _wire2api_f64(arr[2]),
      min: _wire2api_f64(arr[3]),
      step: _wire2api_f64(arr[4]),
    );
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  Float64List _wire2api_float_64_list(dynamic raw) {
    return raw as Float64List;
  }

  List<Constant> _wire2api_list_constant(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_constant).toList();
  }

  List<SampleForDart> _wire2api_list_sample_for_dart(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_sample_for_dart).toList();
  }

  List<SampleListForDart> _wire2api_list_sample_list_for_dart(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_sample_list_for_dart).toList();
  }

  SampleForDart _wire2api_sample_for_dart(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SampleForDart(
      label: _wire2api_String(arr[0]),
      latex: _wire2api_String(arr[1]),
      description: _wire2api_String(arr[2]),
      avater: _wire2api_String(arr[3]),
    );
  }

  SampleListForDart _wire2api_sample_list_for_dart(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return SampleListForDart(
      label: _wire2api_String(arr[0]),
      latex: _wire2api_String(arr[1]),
      description: _wire2api_String(arr[2]),
      avater: _wire2api_String(arr[3]),
      list: _wire2api_list_sample_for_dart(arr[4]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_VariableBuilder> api2wire_box_autoadd_variable_builder(
      VariableBuilder raw) {
    final ptr = inner.new_box_autoadd_variable_builder_0();
    _api_fill_to_wire_variable_builder(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_constant> api2wire_list_constant(List<Constant> raw) {
    final ans = inner.new_list_constant_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_constant(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_variable_builder(
      VariableBuilder apiObj, ffi.Pointer<wire_VariableBuilder> wireObj) {
    _api_fill_to_wire_variable_builder(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_constant(Constant apiObj, wire_Constant wireObj) {
    wireObj.identity = api2wire_String(apiObj.identity);
    wireObj.value = api2wire_f64(apiObj.value);
    wireObj.max = api2wire_f64(apiObj.max);
    wireObj.min = api2wire_f64(apiObj.min);
    wireObj.step = api2wire_f64(apiObj.step);
  }

  void _api_fill_to_wire_variable_builder(
      VariableBuilder apiObj, wire_VariableBuilder wireObj) {
    wireObj.identity = api2wire_String(apiObj.identity);
    wireObj.uninitialized = api2wire_bool(apiObj.uninitialized);
    wireObj.min = api2wire_f64(apiObj.min);
    wireObj.max = api2wire_f64(apiObj.max);
    wireObj.step = api2wire_f64(apiObj.step);
    wireObj.value = api2wire_f64(apiObj.value);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  WireSyncReturn wire_draw(
    ffi.Pointer<wire_uint_8_list> func,
    ffi.Pointer<wire_VariableBuilder> variable_builder,
    ffi.Pointer<wire_list_constant> constant_provider,
    bool change_context,
  ) {
    return _wire_draw(
      func,
      variable_builder,
      constant_provider,
      change_context,
    );
  }

  late final _wire_drawPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_VariableBuilder>,
              ffi.Pointer<wire_list_constant>,
              ffi.Bool)>>('wire_draw');
  late final _wire_draw = _wire_drawPtr.asFunction<
      WireSyncReturn Function(
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_VariableBuilder>,
          ffi.Pointer<wire_list_constant>,
          bool)>();

  WireSyncReturn wire_get_sample_for_dart() {
    return _wire_get_sample_for_dart();
  }

  late final _wire_get_sample_for_dartPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_get_sample_for_dart');
  late final _wire_get_sample_for_dart =
      _wire_get_sample_for_dartPtr.asFunction<WireSyncReturn Function()>();

  ffi.Pointer<wire_VariableBuilder> new_box_autoadd_variable_builder_0() {
    return _new_box_autoadd_variable_builder_0();
  }

  late final _new_box_autoadd_variable_builder_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_VariableBuilder> Function()>>(
          'new_box_autoadd_variable_builder_0');
  late final _new_box_autoadd_variable_builder_0 =
      _new_box_autoadd_variable_builder_0Ptr
          .asFunction<ffi.Pointer<wire_VariableBuilder> Function()>();

  ffi.Pointer<wire_list_constant> new_list_constant_0(
    int len,
  ) {
    return _new_list_constant_0(
      len,
    );
  }

  late final _new_list_constant_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_list_constant> Function(ffi.Int32)>>(
      'new_list_constant_0');
  late final _new_list_constant_0 = _new_list_constant_0Ptr
      .asFunction<ffi.Pointer<wire_list_constant> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_VariableBuilder extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> identity;

  @ffi.Bool()
  external bool uninitialized;

  @ffi.Double()
  external double min;

  @ffi.Double()
  external double max;

  @ffi.Double()
  external double step;

  @ffi.Double()
  external double value;
}

final class wire_Constant extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> identity;

  @ffi.Double()
  external double value;

  @ffi.Double()
  external double max;

  @ffi.Double()
  external double min;

  @ffi.Double()
  external double step;
}

final class wire_list_constant extends ffi.Struct {
  external ffi.Pointer<wire_Constant> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
