// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.15.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'libs/expression.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  VariableBuilder dco_decode_box_autoadd_variable_builder(dynamic raw);

  @protected
  CalcReturnForDart dco_decode_calc_return_for_dart(dynamic raw);

  @protected
  Constant dco_decode_constant(dynamic raw);

  @protected
  Expression dco_decode_expression(dynamic raw);

  @protected
  ExpressionList dco_decode_expression_list(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  List<Constant> dco_decode_list_constant(dynamic raw);

  @protected
  List<Expression> dco_decode_list_expression(dynamic raw);

  @protected
  List<ExpressionList> dco_decode_list_expression_list(dynamic raw);

  @protected
  Float64List dco_decode_list_prim_f_64_strict(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  VariableBuilder dco_decode_variable_builder(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  VariableBuilder sse_decode_box_autoadd_variable_builder(
      SseDeserializer deserializer);

  @protected
  CalcReturnForDart sse_decode_calc_return_for_dart(
      SseDeserializer deserializer);

  @protected
  Constant sse_decode_constant(SseDeserializer deserializer);

  @protected
  Expression sse_decode_expression(SseDeserializer deserializer);

  @protected
  ExpressionList sse_decode_expression_list(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  List<Constant> sse_decode_list_constant(SseDeserializer deserializer);

  @protected
  List<Expression> sse_decode_list_expression(SseDeserializer deserializer);

  @protected
  List<ExpressionList> sse_decode_list_expression_list(
      SseDeserializer deserializer);

  @protected
  Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  VariableBuilder sse_decode_variable_builder(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_variable_builder>
      cst_encode_box_autoadd_variable_builder(VariableBuilder raw) {
    final ptr = wire.cst_new_box_autoadd_variable_builder();
    cst_api_fill_to_wire_variable_builder(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_list_constant> cst_encode_list_constant(
      List<Constant> raw) {
    final ans = wire.cst_new_list_constant(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_constant(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_expression> cst_encode_list_expression(
      List<Expression> raw) {
    final ans = wire.cst_new_list_expression(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_expression(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_expression_list> cst_encode_list_expression_list(
      List<ExpressionList> raw) {
    final ans = wire.cst_new_list_expression_list(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_expression_list(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_f_64_strict> cst_encode_list_prim_f_64_strict(
      Float64List raw) {
    final ans = wire.cst_new_list_prim_f_64_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_variable_builder(
      VariableBuilder apiObj, ffi.Pointer<wire_cst_variable_builder> wireObj) {
    cst_api_fill_to_wire_variable_builder(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_calc_return_for_dart(
      CalcReturnForDart apiObj, wire_cst_calc_return_for_dart wireObj) {
    wireObj.result = cst_encode_list_prim_f_64_strict(apiObj.result);
    wireObj.constants = cst_encode_list_constant(apiObj.constants);
  }

  @protected
  void cst_api_fill_to_wire_constant(
      Constant apiObj, wire_cst_constant wireObj) {
    wireObj.identity = cst_encode_String(apiObj.identity);
    wireObj.value = cst_encode_f_64(apiObj.value);
    wireObj.max = cst_encode_f_64(apiObj.max);
    wireObj.min = cst_encode_f_64(apiObj.min);
    wireObj.step = cst_encode_f_64(apiObj.step);
  }

  @protected
  void cst_api_fill_to_wire_expression(
      Expression apiObj, wire_cst_expression wireObj) {
    wireObj.name = cst_encode_String(apiObj.name);
    wireObj.latex = cst_encode_String(apiObj.latex);
    wireObj.description = cst_encode_String(apiObj.description);
    wireObj.avatar = cst_encode_String(apiObj.avatar);
  }

  @protected
  void cst_api_fill_to_wire_expression_list(
      ExpressionList apiObj, wire_cst_expression_list wireObj) {
    wireObj.name = cst_encode_String(apiObj.name);
    wireObj.latex = cst_encode_String(apiObj.latex);
    wireObj.description = cst_encode_String(apiObj.description);
    wireObj.avatar = cst_encode_String(apiObj.avatar);
    wireObj.list = cst_encode_list_expression(apiObj.list);
  }

  @protected
  void cst_api_fill_to_wire_variable_builder(
      VariableBuilder apiObj, wire_cst_variable_builder wireObj) {
    wireObj.identity = cst_encode_String(apiObj.identity);
    wireObj.uninitialized = cst_encode_bool(apiObj.uninitialized);
    wireObj.min = cst_encode_f_64(apiObj.min);
    wireObj.max = cst_encode_f_64(apiObj.max);
    wireObj.step = cst_encode_f_64(apiObj.step);
    wireObj.value = cst_encode_f_64(apiObj.value);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  double cst_encode_f_64(double raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_variable_builder(
      VariableBuilder self, SseSerializer serializer);

  @protected
  void sse_encode_calc_return_for_dart(
      CalcReturnForDart self, SseSerializer serializer);

  @protected
  void sse_encode_constant(Constant self, SseSerializer serializer);

  @protected
  void sse_encode_expression(Expression self, SseSerializer serializer);

  @protected
  void sse_encode_expression_list(
      ExpressionList self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_list_constant(List<Constant> self, SseSerializer serializer);

  @protected
  void sse_encode_list_expression(
      List<Expression> self, SseSerializer serializer);

  @protected
  void sse_encode_list_expression_list(
      List<ExpressionList> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_f_64_strict(
      Float64List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_variable_builder(
      VariableBuilder self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dart_fn_deliver_output(
    int call_id,
    ffi.Pointer<ffi.Uint8> ptr_,
    int rust_vec_len_,
    int data_len_,
  ) {
    return _dart_fn_deliver_output(
      call_id,
      ptr_,
      rust_vec_len_,
      data_len_,
    );
  }

  late final _dart_fn_deliver_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32,
              ffi.Int32)>>('frbgen_masthore_dart_fn_deliver_output');
  late final _dart_fn_deliver_output = _dart_fn_deliver_outputPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int, int)>();

  WireSyncRust2DartDco wire_draw(
    ffi.Pointer<wire_cst_list_prim_u_8_strict> func,
    ffi.Pointer<wire_cst_variable_builder> variable_builder,
    ffi.Pointer<wire_cst_list_constant> constant_provider,
    bool change_context,
  ) {
    return _wire_draw(
      func,
      variable_builder,
      constant_provider,
      change_context,
    );
  }

  late final _wire_drawPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_variable_builder>,
              ffi.Pointer<wire_cst_list_constant>,
              ffi.Bool)>>('frbgen_masthore_wire_draw');
  late final _wire_draw = _wire_drawPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          ffi.Pointer<wire_cst_variable_builder>,
          ffi.Pointer<wire_cst_list_constant>,
          bool)>();

  WireSyncRust2DartDco wire_get_functions() {
    return _wire_get_functions();
  }

  late final _wire_get_functionsPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function()>>(
          'frbgen_masthore_wire_get_functions');
  late final _wire_get_functions =
      _wire_get_functionsPtr.asFunction<WireSyncRust2DartDco Function()>();

  ffi.Pointer<wire_cst_variable_builder>
      cst_new_box_autoadd_variable_builder() {
    return _cst_new_box_autoadd_variable_builder();
  }

  late final _cst_new_box_autoadd_variable_builderPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_variable_builder> Function()>>(
      'frbgen_masthore_cst_new_box_autoadd_variable_builder');
  late final _cst_new_box_autoadd_variable_builder =
      _cst_new_box_autoadd_variable_builderPtr
          .asFunction<ffi.Pointer<wire_cst_variable_builder> Function()>();

  ffi.Pointer<wire_cst_list_constant> cst_new_list_constant(
    int len,
  ) {
    return _cst_new_list_constant(
      len,
    );
  }

  late final _cst_new_list_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_constant> Function(
              ffi.Int32)>>('frbgen_masthore_cst_new_list_constant');
  late final _cst_new_list_constant = _cst_new_list_constantPtr
      .asFunction<ffi.Pointer<wire_cst_list_constant> Function(int)>();

  ffi.Pointer<wire_cst_list_expression> cst_new_list_expression(
    int len,
  ) {
    return _cst_new_list_expression(
      len,
    );
  }

  late final _cst_new_list_expressionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_expression> Function(
              ffi.Int32)>>('frbgen_masthore_cst_new_list_expression');
  late final _cst_new_list_expression = _cst_new_list_expressionPtr
      .asFunction<ffi.Pointer<wire_cst_list_expression> Function(int)>();

  ffi.Pointer<wire_cst_list_expression_list> cst_new_list_expression_list(
    int len,
  ) {
    return _cst_new_list_expression_list(
      len,
    );
  }

  late final _cst_new_list_expression_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_expression_list> Function(
              ffi.Int32)>>('frbgen_masthore_cst_new_list_expression_list');
  late final _cst_new_list_expression_list = _cst_new_list_expression_listPtr
      .asFunction<ffi.Pointer<wire_cst_list_expression_list> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_f_64_strict> cst_new_list_prim_f_64_strict(
    int len,
  ) {
    return _cst_new_list_prim_f_64_strict(
      len,
    );
  }

  late final _cst_new_list_prim_f_64_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_f_64_strict> Function(
              ffi.Int32)>>('frbgen_masthore_cst_new_list_prim_f_64_strict');
  late final _cst_new_list_prim_f_64_strict = _cst_new_list_prim_f_64_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_f_64_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(
              ffi.Int32)>>('frbgen_masthore_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_variable_builder extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> identity;

  @ffi.Bool()
  external bool uninitialized;

  @ffi.Double()
  external double min;

  @ffi.Double()
  external double max;

  @ffi.Double()
  external double step;

  @ffi.Double()
  external double value;
}

final class wire_cst_constant extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> identity;

  @ffi.Double()
  external double value;

  @ffi.Double()
  external double max;

  @ffi.Double()
  external double min;

  @ffi.Double()
  external double step;
}

final class wire_cst_list_constant extends ffi.Struct {
  external ffi.Pointer<wire_cst_constant> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_expression extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> name;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> latex;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> description;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> avatar;
}

final class wire_cst_list_expression extends ffi.Struct {
  external ffi.Pointer<wire_cst_expression> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_expression_list extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> name;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> latex;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> description;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> avatar;

  external ffi.Pointer<wire_cst_list_expression> list;
}

final class wire_cst_list_expression_list extends ffi.Struct {
  external ffi.Pointer<wire_cst_expression_list> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_prim_f_64_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Double> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_calc_return_for_dart extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_f_64_strict> result;

  external ffi.Pointer<wire_cst_list_constant> constants;
}
