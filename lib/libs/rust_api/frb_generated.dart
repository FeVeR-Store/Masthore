// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.15.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'libs/expression.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'native',
    ioDirectory: 'native/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  CalcReturnForDart draw(
      {required String func,
      required VariableBuilder variableBuilder,
      required List<Constant> constantProvider,
      required bool changeContext,
      dynamic hint});

  List<ExpressionList> getFunctions({dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  CalcReturnForDart draw(
      {required String func,
      required VariableBuilder variableBuilder,
      required List<Constant> constantProvider,
      required bool changeContext,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(func);
        var arg1 = cst_encode_box_autoadd_variable_builder(variableBuilder);
        var arg2 = cst_encode_list_constant(constantProvider);
        var arg3 = cst_encode_bool(changeContext);
        return wire.wire_draw(arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_calc_return_for_dart,
        decodeErrorData: null,
      ),
      constMeta: kDrawConstMeta,
      argValues: [func, variableBuilder, constantProvider, changeContext],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDrawConstMeta => const TaskConstMeta(
        debugName: "draw",
        argNames: [
          "func",
          "variableBuilder",
          "constantProvider",
          "changeContext"
        ],
      );

  @override
  List<ExpressionList> getFunctions({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_get_functions();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_expression_list,
        decodeErrorData: null,
      ),
      constMeta: kGetFunctionsConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetFunctionsConstMeta => const TaskConstMeta(
        debugName: "get_functions",
        argNames: [],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    return raw as bool;
  }

  @protected
  VariableBuilder dco_decode_box_autoadd_variable_builder(dynamic raw) {
    return dco_decode_variable_builder(raw);
  }

  @protected
  CalcReturnForDart dco_decode_calc_return_for_dart(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CalcReturnForDart(
      result: dco_decode_list_prim_f_64_strict(arr[0]),
      constants: dco_decode_list_constant(arr[1]),
    );
  }

  @protected
  Constant dco_decode_constant(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Constant(
      identity: dco_decode_String(arr[0]),
      value: dco_decode_f_64(arr[1]),
      max: dco_decode_f_64(arr[2]),
      min: dco_decode_f_64(arr[3]),
      step: dco_decode_f_64(arr[4]),
    );
  }

  @protected
  Expression dco_decode_expression(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Expression(
      name: dco_decode_String(arr[0]),
      latex: dco_decode_String(arr[1]),
      description: dco_decode_String(arr[2]),
      avatar: dco_decode_String(arr[3]),
    );
  }

  @protected
  ExpressionList dco_decode_expression_list(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ExpressionList(
      name: dco_decode_String(arr[0]),
      latex: dco_decode_String(arr[1]),
      description: dco_decode_String(arr[2]),
      avatar: dco_decode_String(arr[3]),
      list: dco_decode_list_expression(arr[4]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    return raw as double;
  }

  @protected
  List<Constant> dco_decode_list_constant(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_constant).toList();
  }

  @protected
  List<Expression> dco_decode_list_expression(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_expression).toList();
  }

  @protected
  List<ExpressionList> dco_decode_list_expression_list(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_expression_list).toList();
  }

  @protected
  Float64List dco_decode_list_prim_f_64_strict(dynamic raw) {
    return raw as Float64List;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    return raw as Uint8List;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  VariableBuilder dco_decode_variable_builder(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return VariableBuilder(
      identity: dco_decode_String(arr[0]),
      uninitialized: dco_decode_bool(arr[1]),
      min: dco_decode_f_64(arr[2]),
      max: dco_decode_f_64(arr[3]),
      step: dco_decode_f_64(arr[4]),
      value: dco_decode_f_64(arr[5]),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  VariableBuilder sse_decode_box_autoadd_variable_builder(
      SseDeserializer deserializer) {
    return (sse_decode_variable_builder(deserializer));
  }

  @protected
  CalcReturnForDart sse_decode_calc_return_for_dart(
      SseDeserializer deserializer) {
    var var_result = sse_decode_list_prim_f_64_strict(deserializer);
    var var_constants = sse_decode_list_constant(deserializer);
    return CalcReturnForDart(result: var_result, constants: var_constants);
  }

  @protected
  Constant sse_decode_constant(SseDeserializer deserializer) {
    var var_identity = sse_decode_String(deserializer);
    var var_value = sse_decode_f_64(deserializer);
    var var_max = sse_decode_f_64(deserializer);
    var var_min = sse_decode_f_64(deserializer);
    var var_step = sse_decode_f_64(deserializer);
    return Constant(
        identity: var_identity,
        value: var_value,
        max: var_max,
        min: var_min,
        step: var_step);
  }

  @protected
  Expression sse_decode_expression(SseDeserializer deserializer) {
    var var_name = sse_decode_String(deserializer);
    var var_latex = sse_decode_String(deserializer);
    var var_description = sse_decode_String(deserializer);
    var var_avatar = sse_decode_String(deserializer);
    return Expression(
        name: var_name,
        latex: var_latex,
        description: var_description,
        avatar: var_avatar);
  }

  @protected
  ExpressionList sse_decode_expression_list(SseDeserializer deserializer) {
    var var_name = sse_decode_String(deserializer);
    var var_latex = sse_decode_String(deserializer);
    var var_description = sse_decode_String(deserializer);
    var var_avatar = sse_decode_String(deserializer);
    var var_list = sse_decode_list_expression(deserializer);
    return ExpressionList(
        name: var_name,
        latex: var_latex,
        description: var_description,
        avatar: var_avatar,
        list: var_list);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    return deserializer.buffer.getFloat64();
  }

  @protected
  List<Constant> sse_decode_list_constant(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Constant>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_constant(deserializer));
    }
    return ans_;
  }

  @protected
  List<Expression> sse_decode_list_expression(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Expression>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_expression(deserializer));
    }
    return ans_;
  }

  @protected
  List<ExpressionList> sse_decode_list_expression_list(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ExpressionList>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_expression_list(deserializer));
    }
    return ans_;
  }

  @protected
  Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat64List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  VariableBuilder sse_decode_variable_builder(SseDeserializer deserializer) {
    var var_identity = sse_decode_String(deserializer);
    var var_uninitialized = sse_decode_bool(deserializer);
    var var_min = sse_decode_f_64(deserializer);
    var var_max = sse_decode_f_64(deserializer);
    var var_step = sse_decode_f_64(deserializer);
    var var_value = sse_decode_f_64(deserializer);
    return VariableBuilder(
        identity: var_identity,
        uninitialized: var_uninitialized,
        min: var_min,
        max: var_max,
        step: var_step,
        value: var_value);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    return raw;
  }

  @protected
  double cst_encode_f_64(double raw) {
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    return raw;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_variable_builder(
      VariableBuilder self, SseSerializer serializer) {
    sse_encode_variable_builder(self, serializer);
  }

  @protected
  void sse_encode_calc_return_for_dart(
      CalcReturnForDart self, SseSerializer serializer) {
    sse_encode_list_prim_f_64_strict(self.result, serializer);
    sse_encode_list_constant(self.constants, serializer);
  }

  @protected
  void sse_encode_constant(Constant self, SseSerializer serializer) {
    sse_encode_String(self.identity, serializer);
    sse_encode_f_64(self.value, serializer);
    sse_encode_f_64(self.max, serializer);
    sse_encode_f_64(self.min, serializer);
    sse_encode_f_64(self.step, serializer);
  }

  @protected
  void sse_encode_expression(Expression self, SseSerializer serializer) {
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.latex, serializer);
    sse_encode_String(self.description, serializer);
    sse_encode_String(self.avatar, serializer);
  }

  @protected
  void sse_encode_expression_list(
      ExpressionList self, SseSerializer serializer) {
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.latex, serializer);
    sse_encode_String(self.description, serializer);
    sse_encode_String(self.avatar, serializer);
    sse_encode_list_expression(self.list, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_list_constant(List<Constant> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_constant(item, serializer);
    }
  }

  @protected
  void sse_encode_list_expression(
      List<Expression> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_expression(item, serializer);
    }
  }

  @protected
  void sse_encode_list_expression_list(
      List<ExpressionList> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_expression_list(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_f_64_strict(
      Float64List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}

  @protected
  void sse_encode_variable_builder(
      VariableBuilder self, SseSerializer serializer) {
    sse_encode_String(self.identity, serializer);
    sse_encode_bool(self.uninitialized, serializer);
    sse_encode_f_64(self.min, serializer);
    sse_encode_f_64(self.max, serializer);
    sse_encode_f_64(self.step, serializer);
    sse_encode_f_64(self.value, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }
}
